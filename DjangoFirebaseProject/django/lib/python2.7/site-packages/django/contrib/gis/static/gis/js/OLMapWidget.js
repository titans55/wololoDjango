/* global ol */

var GeometryTypeControl = function(opt_options) ***REMOVED***
    'use strict';
    // Map control to switch type when geometry type is unknown
    var options = opt_options || ***REMOVED******REMOVED***;

    var element = document.createElement('div');
    element.className = 'switch-type type-' + options.type + ' ol-control ol-unselectable';
    if (options.active) ***REMOVED***
        element.className += " type-active";
    ***REMOVED***

    var self = this;
    var switchType = function(e) ***REMOVED***
        e.preventDefault();
        if (options.widget.currentGeometryType !== self) ***REMOVED***
            options.widget.map.removeInteraction(options.widget.interactions.draw);
            options.widget.interactions.draw = new ol.interaction.Draw(***REMOVED***
                features: options.widget.featureCollection,
                type: options.type
            ***REMOVED***);
            options.widget.map.addInteraction(options.widget.interactions.draw);
            var className = options.widget.currentGeometryType.element.className.replace(/ type-active/g, '');
            options.widget.currentGeometryType.element.className = className;
            options.widget.currentGeometryType = self;
            element.className += " type-active";
        ***REMOVED***
    ***REMOVED***;

    element.addEventListener('click', switchType, false);
    element.addEventListener('touchstart', switchType, false);

    ol.control.Control.call(this, ***REMOVED***
        element: element
    ***REMOVED***);
***REMOVED***;
ol.inherits(GeometryTypeControl, ol.control.Control);

// TODO: allow deleting individual features (#8972)
(function() ***REMOVED***
    'use strict';
    var jsonFormat = new ol.format.GeoJSON();

    function MapWidget(options) ***REMOVED***
        this.map = null;
        this.interactions = ***REMOVED***draw: null, modify: null***REMOVED***;
        this.typeChoices = false;
        this.ready = false;

        // Default options
        this.options = ***REMOVED***
            default_lat: 0,
            default_lon: 0,
            default_zoom: 12,
            is_collection: options.geom_name.indexOf('Multi') > -1 || options.geom_name.indexOf('Collection') > -1
        ***REMOVED***;

        // Altering using user-provided options
        for (var property in options) ***REMOVED***
            if (options.hasOwnProperty(property)) ***REMOVED***
                this.options[property] = options[property];
            ***REMOVED***
        ***REMOVED***
        if (!options.base_layer) ***REMOVED***
            this.options.base_layer = new ol.layer.Tile(***REMOVED***source: new ol.source.OSM()***REMOVED***);
        ***REMOVED***

        this.map = this.createMap();
        this.featureCollection = new ol.Collection();
        this.featureOverlay = new ol.layer.Vector(***REMOVED***
            map: this.map,
            source: new ol.source.Vector(***REMOVED***
                features: this.featureCollection,
                useSpatialIndex: false // improve performance
            ***REMOVED***),
            updateWhileAnimating: true, // optional, for instant visual feedback
            updateWhileInteracting: true // optional, for instant visual feedback
        ***REMOVED***);

        // Populate and set handlers for the feature container
        var self = this;
        this.featureCollection.on('add', function(event) ***REMOVED***
            var feature = event.element;
            feature.on('change', function() ***REMOVED***
                self.serializeFeatures();
            ***REMOVED***);
            if (self.ready) ***REMOVED***
                self.serializeFeatures();
                if (!self.options.is_collection) ***REMOVED***
                    self.disableDrawing(); // Only allow one feature at a time
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***);

        var initial_value = document.getElementById(this.options.id).value;
        if (initial_value) ***REMOVED***
            var features = jsonFormat.readFeatures('***REMOVED***"type": "Feature", "geometry": ' + initial_value + '***REMOVED***');
            var extent = ol.extent.createEmpty();
            features.forEach(function(feature) ***REMOVED***
                this.featureOverlay.getSource().addFeature(feature);
                ol.extent.extend(extent, feature.getGeometry().getExtent());
            ***REMOVED***, this);
            // Center/zoom the map
            this.map.getView().fit(extent, this.map.getSize(), ***REMOVED***maxZoom: this.options.default_zoom***REMOVED***);
        ***REMOVED*** else ***REMOVED***
            this.map.getView().setCenter(this.defaultCenter());
        ***REMOVED***
        this.createInteractions();
        if (initial_value && !this.options.is_collection) ***REMOVED***
            this.disableDrawing();
        ***REMOVED***
        this.ready = true;
    ***REMOVED***

    MapWidget.prototype.createMap = function() ***REMOVED***
        var map = new ol.Map(***REMOVED***
            target: this.options.map_id,
            layers: [this.options.base_layer],
            view: new ol.View(***REMOVED***
                zoom: this.options.default_zoom
            ***REMOVED***)
        ***REMOVED***);
        return map;
    ***REMOVED***;

    MapWidget.prototype.createInteractions = function() ***REMOVED***
        // Initialize the modify interaction
        this.interactions.modify = new ol.interaction.Modify(***REMOVED***
            features: this.featureCollection,
            deleteCondition: function(event) ***REMOVED***
                return ol.events.condition.shiftKeyOnly(event) &&
                    ol.events.condition.singleClick(event);
            ***REMOVED***
        ***REMOVED***);

        // Initialize the draw interaction
        var geomType = this.options.geom_name;
        if (geomType === "Unknown" || geomType === "GeometryCollection") ***REMOVED***
            // Default to Point, but create icons to switch type
            geomType = "Point";
            this.currentGeometryType = new GeometryTypeControl(***REMOVED***widget: this, type: "Point", active: true***REMOVED***);
            this.map.addControl(this.currentGeometryType);
            this.map.addControl(new GeometryTypeControl(***REMOVED***widget: this, type: "LineString", active: false***REMOVED***));
            this.map.addControl(new GeometryTypeControl(***REMOVED***widget: this, type: "Polygon", active: false***REMOVED***));
            this.typeChoices = true;
        ***REMOVED***
        this.interactions.draw = new ol.interaction.Draw(***REMOVED***
            features: this.featureCollection,
            type: geomType
        ***REMOVED***);

        this.map.addInteraction(this.interactions.draw);
        this.map.addInteraction(this.interactions.modify);
    ***REMOVED***;

    MapWidget.prototype.defaultCenter = function() ***REMOVED***
        var center = [this.options.default_lon, this.options.default_lat];
        if (this.options.map_srid) ***REMOVED***
            return ol.proj.transform(center, 'EPSG:4326', this.map.getView().getProjection());
        ***REMOVED***
        return center;
    ***REMOVED***;

    MapWidget.prototype.enableDrawing = function() ***REMOVED***
        this.interactions.draw.setActive(true);
        if (this.typeChoices) ***REMOVED***
            // Show geometry type icons
            var divs = document.getElementsByClassName("switch-type");
            for (var i = 0; i !== divs.length; i++) ***REMOVED***
                divs[i].style.visibility = "visible";
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;

    MapWidget.prototype.disableDrawing = function() ***REMOVED***
        if (this.interactions.draw) ***REMOVED***
            this.interactions.draw.setActive(false);
            if (this.typeChoices) ***REMOVED***
                // Hide geometry type icons
                var divs = document.getElementsByClassName("switch-type");
                for (var i = 0; i !== divs.length; i++) ***REMOVED***
                    divs[i].style.visibility = "hidden";
                ***REMOVED***
            ***REMOVED***
        ***REMOVED***
    ***REMOVED***;

    MapWidget.prototype.clearFeatures = function() ***REMOVED***
        this.featureCollection.clear();
        // Empty textarea widget
        document.getElementById(this.options.id).value = '';
        this.enableDrawing();
    ***REMOVED***;

    MapWidget.prototype.serializeFeatures = function() ***REMOVED***
        // Three use cases: GeometryCollection, multigeometries, and single geometry
        var geometry = null;
        var features = this.featureOverlay.getSource().getFeatures();
        if (this.options.is_collection) ***REMOVED***
            if (this.options.geom_name === "GeometryCollection") ***REMOVED***
                var geometries = [];
                for (var i = 0; i < features.length; i++) ***REMOVED***
                    geometries.push(features[i].getGeometry());
                ***REMOVED***
                geometry = new ol.geom.GeometryCollection(geometries);
            ***REMOVED*** else ***REMOVED***
                geometry = features[0].getGeometry().clone();
                for (var j = 1; j < features.length; j++) ***REMOVED***
                    switch(geometry.getType()) ***REMOVED***
                        case "MultiPoint":
                            geometry.appendPoint(features[j].getGeometry().getPoint(0));
                            break;
                        case "MultiLineString":
                            geometry.appendLineString(features[j].getGeometry().getLineString(0));
                            break;
                        case "MultiPolygon":
                            geometry.appendPolygon(features[j].getGeometry().getPolygon(0));
                    ***REMOVED***
                ***REMOVED***
            ***REMOVED***
        ***REMOVED*** else ***REMOVED***
            if (features[0]) ***REMOVED***
                geometry = features[0].getGeometry();
            ***REMOVED***
        ***REMOVED***
        document.getElementById(this.options.id).value = jsonFormat.writeGeometry(geometry);
    ***REMOVED***;

    window.MapWidget = MapWidget;
***REMOVED***)();
