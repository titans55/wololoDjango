"""Functions to parse datetime objects."""

# We're using regular expressions rather than time.strptime because:
# - They provide both validation and parsing.
# - They're more flexible for datetimes.
# - The date/datetime/time constructors produce friendlier error messages.

import datetime
import re

from django.utils import six
from django.utils.timezone import get_fixed_timezone, utc

date_re = re.compile(
    r'(?P<year>\d***REMOVED***4***REMOVED***)-(?P<month>\d***REMOVED***1,2***REMOVED***)-(?P<day>\d***REMOVED***1,2***REMOVED***)$'
)

time_re = re.compile(
    r'(?P<hour>\d***REMOVED***1,2***REMOVED***):(?P<minute>\d***REMOVED***1,2***REMOVED***)'
    r'(?::(?P<second>\d***REMOVED***1,2***REMOVED***)(?:\.(?P<microsecond>\d***REMOVED***1,6***REMOVED***)\d***REMOVED***0,6***REMOVED***)?)?'
)

datetime_re = re.compile(
    r'(?P<year>\d***REMOVED***4***REMOVED***)-(?P<month>\d***REMOVED***1,2***REMOVED***)-(?P<day>\d***REMOVED***1,2***REMOVED***)'
    r'[T ](?P<hour>\d***REMOVED***1,2***REMOVED***):(?P<minute>\d***REMOVED***1,2***REMOVED***)'
    r'(?::(?P<second>\d***REMOVED***1,2***REMOVED***)(?:\.(?P<microsecond>\d***REMOVED***1,6***REMOVED***)\d***REMOVED***0,6***REMOVED***)?)?'
    r'(?P<tzinfo>Z|[+-]\d***REMOVED***2***REMOVED***(?::?\d***REMOVED***2***REMOVED***)?)?$'
)

standard_duration_re = re.compile(
    r'^'
    r'(?:(?P<days>-?\d+) (days?, )?)?'
    r'((?:(?P<hours>-?\d+):)(?=\d+:\d+))?'
    r'(?:(?P<minutes>-?\d+):)?'
    r'(?P<seconds>-?\d+)'
    r'(?:\.(?P<microseconds>\d***REMOVED***1,6***REMOVED***)\d***REMOVED***0,6***REMOVED***)?'
    r'$'
)

# Support the sections of ISO 8601 date representation that are accepted by
# timedelta
iso8601_duration_re = re.compile(
    r'^(?P<sign>[-+]?)'
    r'P'
    r'(?:(?P<days>\d+(.\d+)?)D)?'
    r'(?:T'
    r'(?:(?P<hours>\d+(.\d+)?)H)?'
    r'(?:(?P<minutes>\d+(.\d+)?)M)?'
    r'(?:(?P<seconds>\d+(.\d+)?)S)?'
    r')?'
    r'$'
)


def parse_date(value):
    """Parses a string and return a datetime.date.

    Raises ValueError if the input is well formatted but not a valid date.
    Returns None if the input isn't well formatted.
    """
    match = date_re.match(value)
    if match:
        kw = ***REMOVED***k: int(v) for k, v in six.iteritems(match.groupdict())***REMOVED***
        return datetime.date(**kw)


def parse_time(value):
    """Parses a string and return a datetime.time.

    This function doesn't support time zone offsets.

    Raises ValueError if the input is well formatted but not a valid time.
    Returns None if the input isn't well formatted, in particular if it
    contains an offset.
    """
    match = time_re.match(value)
    if match:
        kw = match.groupdict()
        if kw['microsecond']:
            kw['microsecond'] = kw['microsecond'].ljust(6, '0')
        kw = ***REMOVED***k: int(v) for k, v in six.iteritems(kw) if v is not None***REMOVED***
        return datetime.time(**kw)


def parse_datetime(value):
    """Parses a string and return a datetime.datetime.

    This function supports time zone offsets. When the input contains one,
    the output uses a timezone with a fixed offset from UTC.

    Raises ValueError if the input is well formatted but not a valid datetime.
    Returns None if the input isn't well formatted.
    """
    match = datetime_re.match(value)
    if match:
        kw = match.groupdict()
        if kw['microsecond']:
            kw['microsecond'] = kw['microsecond'].ljust(6, '0')
        tzinfo = kw.pop('tzinfo')
        if tzinfo == 'Z':
            tzinfo = utc
        elif tzinfo is not None:
            offset_mins = int(tzinfo[-2:]) if len(tzinfo) > 3 else 0
            offset = 60 * int(tzinfo[1:3]) + offset_mins
            if tzinfo[0] == '-':
                offset = -offset
            tzinfo = get_fixed_timezone(offset)
        kw = ***REMOVED***k: int(v) for k, v in six.iteritems(kw) if v is not None***REMOVED***
        kw['tzinfo'] = tzinfo
        return datetime.datetime(**kw)


def parse_duration(value):
    """Parses a duration string and returns a datetime.timedelta.

    The preferred format for durations in Django is '%d %H:%M:%S.%f'.

    Also supports ISO 8601 representation.
    """
    match = standard_duration_re.match(value)
    if not match:
        match = iso8601_duration_re.match(value)
    if match:
        kw = match.groupdict()
        sign = -1 if kw.pop('sign', '+') == '-' else 1
        if kw.get('microseconds'):
            kw['microseconds'] = kw['microseconds'].ljust(6, '0')
        if kw.get('seconds') and kw.get('microseconds') and kw['seconds'].startswith('-'):
            kw['microseconds'] = '-' + kw['microseconds']
        kw = ***REMOVED***k: float(v) for k, v in six.iteritems(kw) if v is not None***REMOVED***
        return sign * datetime.timedelta(**kw)
